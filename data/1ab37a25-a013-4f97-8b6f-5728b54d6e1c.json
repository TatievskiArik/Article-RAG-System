{
  "uid": "1ab37a25-a013-4f97-8b6f-5728b54d6e1c",
  "url": "https://arstechnica.com/ai/2025/07/study-finds-ai-tools-made-open-source-software-developers-19-percent-slower/?utm_source=chatgpt.com",
  "title": "Study finds AI tools made open source software developers 19 percent slower - Ars Technica",
  "content": "Study finds AI tools made open source software developers 19 percent slower - Ars Technica\nSkip to content\nStory text\nSize\nSmall\nStandard\nLarge\nWidth\n*\nStandard\nWide\nLinks\nStandard\nOrange\n* Subscribers only\nLearn more\nWhen it comes to concrete use cases for large language models, AI companies\nlove\nto\npoint out\nthe ways coders and software developers can\nuse these models\nto\nincrease their productivity and overall efficiency\nin\ncreating computer code\n. However,\na new randomized controlled trial\nhas found that experienced open source coders became less efficient at coding-related tasks when they used current AI tools.\nFor\ntheir study\n, researchers at\nMETR\n(Model Evaluation and Threat Research) recruited 16 software developers, each with multiple years of experience working on specific open source repositories. The study followed these developers across 246 individual \"tasks\" involved with maintaining those repos, such as \"bug fixes, features, and refactors that would normally be part of their regular work.\" For half of those tasks, the developers used AI tools like\nCursor Pro\nor Anthropic's Claude; for the others, the programmers were instructed not to use AI assistance. Expected time forecasts for each task (made before the groupings were assigned) were used as a proxy to balance out the overall difficulty of the tasks in each experimental group, and the time needed to fix pull requests based on reviewer feedback was included in the overall assessment.\nExperts and the developers themselves expected time savings that didn't materialize when AI tools were actually used.\nCredit:\nMETR\nExperts and the developers themselves expected time savings that didn't materialize when AI tools were actually used.\nCredit:\nMETR\nBefore performing the study, the developers in question expected the AI tools would lead to a 24 percent reduction in the time needed for their assigned tasks. Even after completing those tasks, the developers believed that the AI tools had made them 20 percent faster, on average. In reality, though, the AI-aided tasks ended up being completed 19 percent\nslower\nthan those completed without AI tools.\nTrade-offs\nBy analyzing screen recording data from a subset of the studied developers, the METR researchers found that AI tools tended to reduce the average time those developers spent actively coding, testing/debugging, or \"reading/searching for information.\" But those time savings were overwhelmed in the end by \"time reviewing AI outputs, prompting AI systems, and waiting for AI generations,\" as well as \"idle/overhead time\" where the screen recordings show no activity.\nOverall, the developers in the study accepted less than 44 percent of the code generated by AI without modification. A majority of the developers reported needing to make changes to the code generated by their AI companion, and a total of 9 percent of the total task time in the \"AI-assisted\" portion of the study was taken up by this kind of review.\nTime saved on things like active coding was overwhelmed by the time needed to prompt, wait on, and review AI outputs in the study.\nCredit:\nMETR\nTime saved on things like active coding was overwhelmed by the time needed to prompt, wait on, and review AI outputs in the study.\nCredit:\nMETR\nOn the surface, METR's results seem to contradict other\nbenchmarks\nand\nexperiments\nthat demonstrate increases in coding efficiency when AI tools are used. But those often also measure productivity in terms of total lines of code or the number of discrete tasks/code commits/pull requests completed, all of which can be poor proxies for actual coding efficiency.\nMany of the existing coding benchmarks also focus on synthetic, algorithmically scorable tasks created specifically for the benchmark test, making it hard to compare those results to those focused on work with pre-existing, real-world code bases. Along those lines, the developers in METR's study reported in surveys that the overall complexity of the repos they work with (which average 10 years of age and over 1 million lines of code) limited how helpful the AI could be. The AI wasn't able to utilize \"important tacit knowledge or context\" about the codebase, the researchers note, while the \"high developer familiarity with [the] repositories\" aided their very human coding efficiency in these tasks.\nThese factors lead the researchers to conclude that current AI coding tools may be particularly ill-suited to \"settings with very high quality standards, or with many implicit requirements (e.g., relating to documentation, testing coverage, or linting/formatting) that take humans substantial time to learn.\" While those factors may not apply in \"many realistic, economically relevant settings\" involving simpler code bases, they could limit the impact of AI tools in this study and similar real-world situations.\nAnd even for complex coding projects like the ones studied, the researchers are also optimistic that further refinement of AI tools could lead to future efficiency gains for programmers. Systems that have better reliability, lower latency, or more relevant outputs (via techniques such as prompt scaffolding or fine-tuning) \"could speed up developers in our setting,\" the researchers write. Already, they say there is \"preliminary evidence\" that the recent release of Claude 3.7 \"can often correctly implement the core functionality of issues on several repositories that are included in our study.\"\nFor now, however, METR's study provides some strong evidence that AI's much-vaunted usefulness for coding tasks may have significant limitations in certain complex, real-world coding scenarios.\nKyle Orland\nSenior Gaming Editor\nKyle Orland\nSenior Gaming Editor\nKyle Orland has been the Senior Gaming Editor at Ars Technica since 2012, writing primarily about the business, tech, and culture behind video games. He has journalism and computer science degrees from University of Maryland. He once\nwrote a whole book about\nMinesweeper\n.\n155 Comments\nComments\nForum view\nPrev story\nNext story\n1.\nPeacock feathers can emit laser beams\n2.\nSt. Paul, MN, was hacked so badly that the National Guard has been deployed\n3.\nHow to get another free year of updates for your Windows 10 PC\n4.\nIn search of riches, hackers plant 4G-enabled Raspberry Pi in bank network\n5.\nGoogle tool misused to scrub tech CEO’s shady past from search"
}